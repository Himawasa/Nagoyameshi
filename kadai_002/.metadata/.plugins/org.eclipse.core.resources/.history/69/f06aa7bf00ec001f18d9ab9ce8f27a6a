package com.example.nagoyameshi.service;

// 必要なインポート
import java.util.Map;
import java.util.Optional;

import jakarta.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.example.nagoyameshi.entity.User;
import com.example.nagoyameshi.repository.RoleRepository;
import com.example.nagoyameshi.repository.UserRepository;
import com.example.nagoyameshi.util.NagoyameshiUtils;

import com.stripe.Stripe;
import com.stripe.exception.StripeException;
import com.stripe.model.Event;
import com.stripe.model.StripeObject;
import com.stripe.model.Subscription;
import com.stripe.model.checkout.Session;
import com.stripe.param.SubscriptionCancelParams;
import com.stripe.param.checkout.SessionRetrieveParams;

import lombok.RequiredArgsConstructor;

/**
 * Stripe に関連する処理を担当するサービスクラス。
 * - サブスクリプションの作成・管理
 * - Webhook イベントの処理
 */
@Service
@RequiredArgsConstructor
public class StripeService {

    // application.properties から Stripe API キーを取得
    @Value("${stripe.api-key}")
    private String stripeApiKey;

    private final UserService userService;
    private final UserRepository userRepository;
    private final RoleRepository roleRepository;

    /**
     * Webhook 経由で受信した Stripe の Checkout セッションイベントを処理し、サブスクリプション情報を登録する。
     *
     * @param event Stripe イベントオブジェクト
     */
    public void processSessionCompleted(Event event) {
        // Stripe オブジェクトを取得（セッションデータ）
        Optional<StripeObject> optionalStripeObject = event.getDataObjectDeserializer().getObject();

        optionalStripeObject.ifPresent(stripeObject -> {
            // セッションデータを取得
            Session session = (Session) stripeObject;
            SessionRetrieveParams params = SessionRetrieveParams.builder()
                    .addExpand("payment_intent") // 支払い情報を展開
                    .build();

            try {
                // Stripe API から最新のセッション情報を取得
                session = Session.retrieve(session.getId(), params, null);

                // セッションのモードを判定
                switch (session.getMode()) {
                    case "subscription" -> {
                        // サブスクリプション ID を取得
                        String subscriptionId = session.getSubscription();
                        System.out.println("Subscription ID: " + subscriptionId);

                        // ユーザー情報にサブスクリプション ID を登録
                        Integer userId = Integer.parseInt(session.getMetadata().get("userId"));
                        Optional<User> optionalUser = userRepository.findById(userId);

                        if (optionalUser.isPresent()) {
                            User user = optionalUser.get();
                            user.setSubscriptionId(subscriptionId);
                            user.setRole(roleRepository.findByName("ROLE_SUBSCRIBER")); // 有料会員ロールを設定
                            userRepository.save(user);
                        }
                    }
                    default -> {
                        // それ以外の処理は不要
                    }
                }
            } catch (StripeException e) {
                e.printStackTrace(); // エラーが発生した場合はスタックトレースを出力
            }
        });
    }

    /**
     * サブスクリプションを解除する
     *
     * @param userId ユーザーID
     * @throws StripeException Stripe API エラー
     */
    @Transactional
    public void unSubscribe(Integer userId) throws StripeException {
        Stripe.apiKey = stripeApiKey;

        // ユーザー情報を取得
        Optional<User> optionalUser = userRepository.findById(userId);
        if (!optionalUser.isPresent()) {
            return;
        }
        User user = optionalUser.get();

        // ユーザーがサブスクリプションを持っている場合、解除処理を行う
        if (user.getSubscriptionId() != null) {
            Subscription subscription = Subscription.retrieve(user.getSubscriptionId());
            SubscriptionCancelParams params = SubscriptionCancelParams.builder().build();
            subscription.cancel(params);

            // サブスクリプション情報を削除し、一般ユーザーに戻す
            user.setSubscriptionId(null);
            user.setRole(roleRepository.findByName("ROLE_GENERAL"));
            userRepository.save(user);
        }
    }
}
