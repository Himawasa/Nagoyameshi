package com.example.nagoyameshi.controller;

import com.example.nagoyameshi.entity.Shop;
import com.example.nagoyameshi.form.ShopRegisterForm;
import com.example.nagoyameshi.form.ShopEditForm;
import com.example.nagoyameshi.repository.ShopRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import javax.validation.Valid;
import java.util.Optional;

@Controller
@RequestMapping("/admin/shops")
public class AdminShopController {

    @Autowired
    private ShopRepository shopRepository;

    @GetMapping
    public String index(Model model) {
        model.addAttribute("shops", shopRepository.findAllByOrderByCreatedAtDesc());
        return "admin/shops/index";
    }

    @GetMapping("/new")
    public String newShop(Model model) {
        model.addAttribute("shopRegisterForm", new ShopRegisterForm());
        return "admin/shops/new";
    }

    @PostMapping
    public String createShop(@Valid @ModelAttribute ShopRegisterForm shopRegisterForm,
                             BindingResult result, RedirectAttributes redirectAttributes) {
        if (result.hasErrors()) {
            return "admin/shops/new";
        }

        Shop shop = new Shop();
        shop.setName(shopRegisterForm.getName());
        shop.setDescription(shopRegisterForm.getDescription());
        shop.setPrice(shopRegisterForm.getPrice());
        shop.setPostalCode(shopRegisterForm.getPostalCode());
        shop.setAddress(shopRegisterForm.getAddress());
        shop.setPhoneNumber(shopRegisterForm.getPhoneNumber());
        shop.setBusinessHours(shopRegisterForm.getBusinessHours());
        shop.setRegularHoliday(shopRegisterForm.getRegularHoliday());
        shop.setImage(shopRegisterForm.getImage());
        shopRepository.save(shop);

        redirectAttributes.addFlashAttribute("message", "ショップを作成しました。");
        return "redirect:/admin/shops";
    }

    @GetMapping("/{id}")
    public String showShop(@PathVariable Long id, Model model) {
        Optional<Shop> shop = shopRepository.findById(id);
        if (shop.isEmpty()) {
            return "redirect:/admin/shops";
        }
        model.addAttribute("shop", shop.get());
        return "admin/shops/show";
    }

    @GetMapping("/{id}/edit")
    public String editShop(@PathVariable Long id, Model model) {
        Optional<Shop> shop = shopRepository.findById(id);
        if (shop.isEmpty()) {
            return "redirect:/admin/shops";
        }
        ShopEditForm form = new ShopEditForm();
        Shop currentShop = shop.get();
        form.setName(currentShop.getName());
        form.setDescription(currentShop.getDescription());
        form.setPrice(currentShop.getPrice());
        form.setPostalCode(currentShop.getPostalCode());
        form.setAddress(currentShop.getAddress());
        form.setPhoneNumber(currentShop.getPhoneNumber());
        form.setBusinessHours(currentShop.getBusinessHours());
        form.setRegularHoliday(currentShop.getRegularHoliday());
        form.setImage(currentShop.getImage());
        model.addAttribute("shopEditForm", form);
        return "admin/shops/edit";
    }

    @PostMapping("/{id}")
    public String updateShop(@PathVariable Long id,
                             @Valid @ModelAttribute ShopEditForm shopEditForm,
                             BindingResult result,
                             RedirectAttributes redirectAttributes) {
        if (result.hasErrors()) {
            return "admin/shops/edit";
        }

        Optional<Shop> shop = shopRepository.findById(id);
        if (shop.isEmpty()) {
            return "redirect:/admin/shops";
        }
        Shop updatedShop = shop.get();
        updatedShop.setName(shopEditForm.getName());
        updatedShop.setDescription(shopEditForm.getDescription());
        updatedShop.setPrice(shopEditForm.getPrice());
        updatedShop.setPostalCode(shopEditForm.getPostalCode());
        updatedShop.setAddress(shopEditForm.getAddress());
        updatedShop.setPhoneNumber(shopEditForm.getPhoneNumber());
        updatedShop.setBusinessHours(shopEditForm.getBusinessHours());
        updatedShop.setRegularHoliday(shopEditForm.getRegularHoliday());
        updatedShop.setImage(shopEditForm.getImage());
        shopRepository.save(updatedShop);

        redirectAttributes.addFlashAttribute("message", "ショップ情報を更新しました。");
        return "redirect:/admin/shops";
    }

    @PostMapping("/{id}/delete")
    public String deleteShop(@PathVariable Long id, RedirectAttributes redirectAttributes) {
        shopRepository.deleteById(id);
        redirectAttributes.addFlashAttribute("message", "ショップを削除しました。");
        return "redirect:/admin/shops";
    }
}
