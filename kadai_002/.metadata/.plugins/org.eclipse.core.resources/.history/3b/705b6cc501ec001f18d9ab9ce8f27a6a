package com.example.nagoyameshi.service;

import jakarta.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import com.example.nagoyameshi.repository.RoleRepository;
import com.example.nagoyameshi.repository.UserRepository;
import com.stripe.Stripe;
import com.stripe.exception.StripeException;
import com.stripe.model.Subscription;
import com.stripe.model.checkout.Session;
import com.stripe.param.SubscriptionCancelParams;
import com.stripe.param.checkout.SessionCreateParams;

/**
 * Stripe に関連する処理を担当するサービスクラス。
 */
@Service
public class StripeService {

    @Value("${stripe.api-key}")
    private String stripeApiKey;

    private final UserRepository userRepository;
    private final RoleRepository roleRepository;

    public StripeService(UserRepository userRepository, RoleRepository roleRepository) {
        this.userRepository = userRepository;
        this.roleRepository = roleRepository;
    }

    /**
     * 予約の支払いをキャンセルする
     */
    public void cancelReservation(String paymentIntentId) {
        Stripe.apiKey = stripeApiKey;

        try {
            Subscription subscription = Subscription.retrieve(paymentIntentId);
            SubscriptionCancelParams params = SubscriptionCancelParams.builder().build();
            subscription.cancel(params);
        } catch (StripeException e) {
            e.printStackTrace();
        }
    }

    /**
     * サブスクリプション登録用の Stripe セッション作成
     */
    public String createStripeSubscribeSession(Integer userId, HttpServletRequest httpServletRequest) {
        Stripe.apiKey = stripeApiKey;

        SessionCreateParams params = SessionCreateParams.builder()
                .setSuccessUrl("https://example.com/success")
                .setCancelUrl("https://example.com/cancel")
                .addLineItem(SessionCreateParams.LineItem.builder()
                        .setQuantity(1L)
                        .setPrice("price_xxx") // 設定済みのPrice ID
                        .build())
                .setMode(SessionCreateParams.Mode.SUBSCRIPTION)
                .putMetadata("userId", userId.toString())
                .build();

        try {
            Session session = Session.create(params);
            return session.getId();
        } catch (StripeException e) {
            e.printStackTrace();
            return "";
        }
    }
}
