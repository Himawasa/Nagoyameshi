package com.example.nagoyameshi.controller;

import com.example.nagoyameshi.form.ShopEditForm;
import com.example.nagoyameshi.form.ShopRegisterForm;
import com.example.nagoyameshi.service.ShopService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;

/**
 * 管理者向けの店舗コントローラクラス。
 * 新規登録、編集、削除などの機能を提供します。
 */
@Controller
@RequestMapping("/admin/shops")
public class AdminShopController {

    @Autowired
    private ShopService shopService;

    /**
     * 店舗リストを表示するメソッド。
     *
     * @param model Viewに渡すモデルオブジェクト
     * @return テンプレート名
     */
    @GetMapping
    public String index(Model model) {
        model.addAttribute("shops", shopService.findAll());
        return "admin/shops/index";
    }

    /**
     * 新規店舗登録フォームを表示するメソッド。
     *
     * @param model Viewに渡すモデルオブジェクト
     * @return テンプレート名
     */
    @GetMapping("/new")
    public String newShop(Model model) {
        model.addAttribute("shopRegisterForm", new ShopRegisterForm());
        return "admin/shops/new";
    }

    /**
     * 新規店舗を作成するメソッド。
     *
     * @param shopRegisterForm 新規店舗登録フォームデータ
     * @param bindingResult    入力検証結果
     * @return リダイレクトURLまたはエラー時のテンプレート名
     */
    @PostMapping
    public String createShop(@Valid @ModelAttribute ShopRegisterForm shopRegisterForm, BindingResult bindingResult) {
        if (bindingResult.hasErrors()) {
            return "admin/shops/new";
        }
        shopService.create(shopRegisterForm);
        return "redirect:/admin/shops";
    }

    /**
     * 店舗編集フォームを表示するメソッド。
     *
     * @param id    編集対象店舗のID
     * @param model Viewに渡すモデルオブジェクト
     * @return テンプレート名
     */
    @GetMapping("/{id}/edit")
    public String editShop(@PathVariable Long id, Model model) {
        ShopEditForm shopEditForm = shopService.findById(id);
        model.addAttribute("shopEditForm", shopEditForm);
        return "admin/shops/edit";
    }

    /**
     * 店舗情報を更新するメソッド。
     *
     * @param id           編集対象店舗のID
     * @param shopEditForm 店舗編集フォームデータ
     * @param bindingResult 入力検証結果
     * @return リダイレクトURLまたはエラー時のテンプレート名
     */
    @PostMapping("/{id}")
    public String updateShop(@PathVariable Long id, @Valid @ModelAttribute ShopEditForm shopEditForm, BindingResult bindingResult) {
        if (bindingResult.hasErrors()) {
            return "admin/shops/edit";
        }
        shopService.update(shopEditForm);
        return "redirect:/admin/shops";
    }

    /**
     * 店舗を削除するメソッド。
     *
     * @param id 削除対象店舗のID
     * @return リダイレクトURL
     */
    @PostMapping("/{id}/delete")
    public String deleteShop(@PathVariable Long id) {
        shopService.delete(id);
        return "redirect:/admin/shops";
    }
}
