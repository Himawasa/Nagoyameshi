package com.example.nagoyameshi.service;

import org.apache.commons.lang3.math.NumberUtils;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.example.nagoyameshi.entity.Role;
import com.example.nagoyameshi.entity.User;
import com.example.nagoyameshi.form.SignupForm;
import com.example.nagoyameshi.form.UserEditForm;
import com.example.nagoyameshi.repository.RoleRepository;
import com.example.nagoyameshi.repository.UserRepository;

import java.util.Optional;

/**
 * ユーザー管理のサービスクラス。
 */
@Service
public class UserService {

    private final UserRepository userRepository;
    private final RoleRepository roleRepository;
    private final PasswordEncoder passwordEncoder;

    public UserService(UserRepository userRepository, RoleRepository roleRepository, PasswordEncoder passwordEncoder) {
        this.userRepository = userRepository;
        this.roleRepository = roleRepository;
        this.passwordEncoder = passwordEncoder;
    }

    /**
     * ユーザー登録
     */
    @Transactional
    public User create(SignupForm signupForm) {
        User user = new User();
        user.setName(signupForm.getName());
        user.setEmail(signupForm.getEmail());
        user.setPassword(passwordEncoder.encode(signupForm.getPassword()));
        user.setRole(roleRepository.findByName("ROLE_GENERAL"));
        user.setEnabled(false);
        return userRepository.save(user);
    }

    /**
     * ユーザーを有効化
     */
    @Transactional
    public void enableUser(User user) {
        user.setEnabled(true);
        userRepository.save(user);
    }

    /**
     * メールアドレスが既に登録済みかをチェック
     */
    public boolean isEmailRegistered(String email) {
        return userRepository.findByEmail(email) != null;
    }

    /**
     * 入力されたパスワードと確認パスワードが一致するか確認
     */
    public boolean isSamePassword(String password, String passwordConfirmation) {
        return password.equals(passwordConfirmation);
    }

    /**
     * メールアドレスが変更されたか確認
     */
    public boolean isEmailChanged(UserEditForm userEditForm) {
        User currentUser = userRepository.getReferenceById(userEditForm.getId());
        return !userEditForm.getEmail().equals(currentUser.getEmail());
    }

    /**
     * ユーザー情報を更新
     */
    @Transactional
    public void update(UserEditForm userEditForm) {
        User user = userRepository.getReferenceById(userEditForm.getId());
        user.setName(userEditForm.getName());
        user.setEmail(userEditForm.getEmail());
        userRepository.save(user);
    }
}
