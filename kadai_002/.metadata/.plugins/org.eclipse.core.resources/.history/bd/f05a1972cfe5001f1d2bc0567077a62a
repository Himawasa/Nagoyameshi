package com.example.nagoyameshi.controller;

import jakarta.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;

import com.example.nagoyameshi.entity.Shop;
import com.example.nagoyameshi.form.ShopEditForm;
import com.example.nagoyameshi.form.ShopRegisterForm;
import com.example.nagoyameshi.repository.ShopRepository;

/**
 * 店舗管理用のコントローラー。
 */
@Controller
@RequestMapping("/admin/shops")
public class AdminShopController {

    @Autowired
    private ShopRepository shopRepository;

    @GetMapping
    public String index(Model model) {
        model.addAttribute("shops", shopRepository.findAll());
        return "admin/shops/index";
    }

    @GetMapping("/new")
    public String newShop(Model model) {
        model.addAttribute("shopRegisterForm", new ShopRegisterForm());
        return "admin/shops/new";
    }

    @PostMapping
    public String createShop(@Valid @ModelAttribute ShopRegisterForm shopRegisterForm,
                             BindingResult bindingResult,
                             Model model) {
        if (bindingResult.hasErrors()) {
            return "admin/shops/new";
        }

        Shop shop = new Shop();
        shop.setName(shopRegisterForm.getName());
        shop.setCategoryId(shopRegisterForm.getCategoryId());
        shop.setDescription(shopRegisterForm.getDescription());
        shop.setImage(shopRegisterForm.getImage());
        shop.setBusinessHours(shopRegisterForm.getBusinessHours());
        shop.setPrice(shopRegisterForm.getPrice());
        shop.setPostalCode(shopRegisterForm.getPostalCode());
        shop.setAddress(shopRegisterForm.getAddress());
        shop.setPhoneNumber(shopRegisterForm.getPhoneNumber());
        shop.setRegularHoliday(shopRegisterForm.getRegularHoliday());

        shopRepository.save(shop);
        return "redirect:/admin/shops";
    }

    @GetMapping("/{id}")
    public String showShop(@PathVariable Long id, Model model) {
        model.addAttribute("shop", shopRepository.findById(id).orElseThrow());
        return "admin/shops/show";
    }

    @GetMapping("/{id}/edit")
    public String editShop(@PathVariable Long id, Model model) {
        Shop shop = shopRepository.findById(id).orElseThrow();
        ShopEditForm form = new ShopEditForm();

        form.setId(shop.getId());
        form.setName(shop.getName());
        form.setCategoryId(shop.getCategoryId());
        form.setDescription(shop.getDescription());
        form.setImage(shop.getImage());
        form.setBusinessHours(shop.getBusinessHours());
        form.setPrice(shop.getPrice());
        form.setPostalCode(shop.getPostalCode());
        form.setAddress(shop.getAddress());
        form.setPhoneNumber(shop.getPhoneNumber());
        form.setRegularHoliday(shop.getRegularHoliday());

        model.addAttribute("shopEditForm", form);
        return "admin/shops/edit";
    }

    @PostMapping("/{id}")
    public String updateShop(@PathVariable Long id,
                             @Valid @ModelAttribute ShopEditForm shopEditForm,
                             BindingResult bindingResult,
                             Model model) {
        if (bindingResult.hasErrors()) {
            return "admin/shops/edit";
        }

        Shop shop = shopRepository.findById(id).orElseThrow();
        shop.setName(shopEditForm.getName());
        shop.setCategoryId(shopEditForm.getCategoryId());
        shop.setDescription(shopEditForm.getDescription());
        shop.setImage(shopEditForm.getImage());
        shop.setBusinessHours(shopEditForm.getBusinessHours());
        shop.setPrice(shopEditForm.getPrice());
        shop.setPostalCode(shopEditForm.getPostalCode());
        shop.setAddress(shopEditForm.getAddress());
        shop.setPhoneNumber(shopEditForm.getPhoneNumber());
        shop.setRegularHoliday(shopEditForm.getRegularHoliday());

        shopRepository.save(shop);
        return "redirect:/admin/shops";
    }

    @PostMapping("/{id}/delete")
    public String deleteShop(@PathVariable Long id) {
        shopRepository.deleteById(id);
        return "redirect:/admin/shops";
    }
}
