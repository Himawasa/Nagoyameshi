package com.example.nagoyameshi.service;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;

import com.example.nagoyameshi.entity.Shop;
import com.example.nagoyameshi.form.ShopEditForm;
import com.example.nagoyameshi.form.ShopRegisterForm;
import com.example.nagoyameshi.repository.ShopRepository;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Optional;
import java.util.UUID;

@Service
public class ShopService {
    private final ShopRepository shopRepository;

    public ShopService(ShopRepository shopRepository) {
        this.shopRepository = shopRepository;
    }

    public Page<Shop> findShops(PageRequest pageRequest, String keyword) {
        return keyword == null || keyword.isBlank() ? shopRepository.findAll(pageRequest) :
                shopRepository.findByNameContainingIgnoreCase(keyword, pageRequest);
    }

    public Optional<Shop> findById(Integer id) {
        return shopRepository.findById(id);
    }

    @Transactional
    public void create(ShopRegisterForm shopRegisterForm) {
        Shop shop = new Shop();
        shop.setName(shopRegisterForm.getName());
        shop.setCategoryId(shopRegisterForm.getCategoryId());
        shop.setDescription(shopRegisterForm.getDescription());
        shop.setPrice(shopRegisterForm.getPrice());
        shop.setPostalCode(shopRegisterForm.getPostalCode());
        shop.setAddress(shopRegisterForm.getAddress());
        shop.setPhoneNumber(shopRegisterForm.getPhoneNumber());
        shop.setBusinessHours(shopRegisterForm.getBusinessHours());
        shop.setRegularHoliday(shopRegisterForm.getRegularHoliday());

        MultipartFile imageFile = shopRegisterForm.getImage();
        if (imageFile != null && !imageFile.isEmpty()) {
            String hashedImageName = UUID.randomUUID() + "_" + imageFile.getOriginalFilename();
            Path filePath = Paths.get("src/main/resources/static/storage/" + hashedImageName);
            try {
                Files.copy(imageFile.getInputStream(), filePath);
                shop.setImage(hashedImageName);
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

        shopRepository.save(shop);
    }

    @Transactional
    public void deleteById(Integer id) {
        shopRepository.deleteById(id);
    }
}
