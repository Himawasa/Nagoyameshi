package com.example.nagoyameshi.service;

import com.example.nagoyameshi.entity.Shop;
import com.example.nagoyameshi.form.ShopEditForm;
import com.example.nagoyameshi.form.ShopRegisterForm;
import com.example.nagoyameshi.repository.ShopRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.Optional;

/**
 * ShopServiceクラスは、ショップに関するビジネスロジックを提供します。
 */
@Service
public class ShopService {

    @Autowired
    private ShopRepository shopRepository;

    /**
     * すべてのショップを取得します。
     * @return ショップのリスト
     */
    public Iterable<Shop> findAll() {
        return shopRepository.findAll();
    }

    /**
     * IDによってショップを検索します。
     * @param id ショップID (Integer型)
     * @return ショップのオプショナルオブジェクト
     */
    public Optional<Shop> findById(Integer id) {
        return shopRepository.findById(id);
    }

    /**
     * ショップを保存します。
     * @param shop 保存するショップオブジェクト
     */
    @Transactional
    public void save(Shop shop) {
        shopRepository.save(shop);
    }

    /**
     * IDによってショップを削除します。
     * @param id ショップID (Integer型)
     */
    @Transactional
    public void deleteById(Integer id) {
        shopRepository.deleteById(id);
    }

    /**
     * ShopRegisterFormを基に新しいショップを作成します。
     * @param form ショップ登録フォーム
     */
    @Transactional
    public void create(ShopRegisterForm form) {
        Shop shop = new Shop();
        shop.setName(form.getName());
        shop.setCategoryId(form.getCategoryId());
        shop.setImage(form.getImageFile());
        shop.setDescription(form.getDescription());
        shop.setBusinessHours(form.getBusinessHours());
        shop.setPrice(form.getPrice());
        shop.setPostalCode(form.getPostalCode());
        shop.setAddress(form.getAddress());
        shop.setPhoneNumber(form.getPhoneNumber());
        shop.setRegularHoliday(form.getRegularHoliday());
        shopRepository.save(shop);
    }

    /**
     * ShopEditFormを基に既存のショップを更新します。
     * @param form ショップ編集フォーム
     */
    @Transactional
    public void update(ShopEditForm form) {
        Optional<Shop> optionalShop = shopRepository.findById(form.getId());
        if (optionalShop.isPresent()) {
            Shop shop = optionalShop.get();
            shop.setName(form.getName());
            shop.setCategoryId(form.getCategoryId());
            shop.setImage(form.getImageFile());
            shop.setDescription(form.getDescription());
            shop.setBusinessHours(form.getBusinessHours());
            shop.setPrice(form.getPrice());
            shop.setPostalCode(form.getPostalCode());
            shop.setAddress(form.getAddress());
            shop.setPhoneNumber(form.getPhoneNumber());
            shop.setRegularHoliday(form.getRegularHoliday());
            shopRepository.save(shop);
        } else {
            throw new IllegalArgumentException("指定されたIDのショップが存在しません: " + form.getId());
        }
    }
}
